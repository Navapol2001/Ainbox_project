name: Deploy Services

on:
  push:
    branches: [main]

jobs:
  check_changes:
    runs-on: ubuntu-latest
    outputs:
      ai_changed: ${{ steps.check_files.outputs.ai_changed }}
      backend_changed: ${{ steps.check_files.outputs.backend_changed }}
      portal_changed: ${{ steps.check_files.outputs.portal_changed }}
      landing_page_changed: ${{ steps.check_files.outputs.landing_page_changed }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 2
      - name: Check for file changes
        id: check_files
        run: |
          git diff --name-only HEAD^ HEAD > changes.txt
          echo "ai_changed=$( grep -q '^ai/' changes.txt && echo 'true' || echo 'false' )" >> $GITHUB_OUTPUT
          echo "backend_changed=$( grep -q '^backend/' changes.txt && echo 'true' || echo 'false' )" >> $GITHUB_OUTPUT
          echo "portal_changed=$( grep -q '^portal/' changes.txt && echo 'true' || echo 'false' )" >> $GITHUB_OUTPUT
          echo "landing_page_changed=$( grep -q '^landing_page/' changes.txt && echo 'true' || echo 'false' )" >> $GITHUB_OUTPUT

  deploy:
    needs: check_changes
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v1
        with:
          project_id: ${{ secrets.PROJECT_ID }}

      - name: Configure gcloud CLI
        run: |
          gcloud config set project ${{ secrets.PROJECT_ID }}
          gcloud auth configure-docker asia-southeast1-docker.pkg.dev

      - name: Deploy AI Service
        if: needs.check_changes.outputs.ai_changed == 'true'
        env:
          PROJECT_ID: ${{ secrets.PROJECT_ID }}
        run: |
          cd ai
          chmod +x cloud_run_deploy.sh
          ./cloud_run_deploy.sh

      - name: Deploy Backend Service
        if: needs.check_changes.outputs.backend_changed == 'true'
        env:
          PROJECT_ID: ${{ secrets.PROJECT_ID }}
        run: |
          cd backend
          chmod +x cloud_run_deploy.sh
          ./cloud_run_deploy.sh

      - name: Deploy Portal Service
        if: needs.check_changes.outputs.portal_changed == 'true'
        env:
          PROJECT_ID: ${{ secrets.PROJECT_ID }}
        run: |
          cd portal
          chmod +x cloud_run_deploy.sh
          ./cloud_run_deploy.sh

      - name: Deploy Landing Page Service
        if: needs.check_changes.outputs.landing_page_changed == 'true'
        env:
          PROJECT_ID: ${{ secrets.PROJECT_ID }}
        run: |
          cd landing_page
          chmod +x cloud_run_deploy.sh
          ./cloud_run_deploy.sh

      - name: Configure Load Balancer
        if: needs.check_changes.outputs.ai_changed == 'true' || needs.check_changes.outputs.backend_changed == 'true' || needs.check_changes.outputs.portal_changed == 'true' || needs.check_changes.outputs.landing_page_changed == 'true'
        run: |
          # Function to create or update NEG
          create_or_update_neg() {
            if gcloud compute network-endpoint-groups describe $1 --region=asia-southeast1 &>/dev/null; then
              echo "Updating NEG: $1"
              gcloud compute network-endpoint-groups update $1 \
                --region=asia-southeast1 \
                --network-endpoint-type=serverless \
                --cloud-run-service=$2
            else
              echo "Creating NEG: $1"
              gcloud compute network-endpoint-groups create $1 \
                --region=asia-southeast1 \
                --network-endpoint-type=serverless \
                --cloud-run-service=$2
            fi
          }

          # Create or update NEGs
          create_or_update_neg ainbox-neg ainbox
          create_or_update_neg backend-neg backend
          create_or_update_neg protal-neg protal
          create_or_update_neg landingpage-neg landingpage

          # Function to create or update backend service
          create_or_update_backend_service() {
            if gcloud compute backend-services describe $1 --global &>/dev/null; then
              echo "Updating backend service: $1"
              gcloud compute backend-services update $1 \
                --global \
                --load-balancing-scheme=EXTERNAL_MANAGED
            else
              echo "Creating backend service: $1"
              gcloud compute backend-services create $1 \
                --global \
                --load-balancing-scheme=EXTERNAL_MANAGED
            fi
            
            # Add or update backend
            gcloud compute backend-services add-backend $1 \
              --global \
              --network-endpoint-group=$2 \
              --network-endpoint-group-region=asia-southeast1
          }

          # Create or update backend services
          create_or_update_backend_service ainbox-backend ainbox-neg
          create_or_update_backend_service backend-backend backend-neg
          create_or_update_backend_service protal-backend protal-neg
          create_or_update_backend_service landingpage-backend landingpage-neg

          # Create or update URL map
          if gcloud compute url-maps describe my-load-balancer &>/dev/null; then
            echo "Updating URL map"
            gcloud compute url-maps set-default-service my-load-balancer \
              --default-service=landingpage-backend
          else
            echo "Creating URL map"
            gcloud compute url-maps create my-load-balancer \
              --default-service=landingpage-backend
          fi

          # Update path matcher
          gcloud compute url-maps add-path-matcher my-load-balancer \
            --path-matcher-name=pathmap \
            --default-service=landingpage-backend \
            --path-rules="/portal/*=protal-backend,/api/*=backend-backend,/ai/*=ainbox-backend" \
            --existing-host

          # Create or update target HTTP proxy
          if gcloud compute target-http-proxies describe my-load-balancer-proxy &>/dev/null; then
            echo "Updating target HTTP proxy"
            gcloud compute target-http-proxies update my-load-balancer-proxy \
              --url-map=my-load-balancer
          else
            echo "Creating target HTTP proxy"
            gcloud compute target-http-proxies create my-load-balancer-proxy \
              --url-map=my-load-balancer
          fi

          # Create or update forwarding rule
          if gcloud compute forwarding-rules describe http-content-rule --global &>/dev/null; then
            echo "Forwarding rule already exists"
          else
            echo "Creating forwarding rule"
            gcloud compute forwarding-rules create http-content-rule \
              --global \
              --target-http-proxy=my-load-balancer-proxy \
              --ports=80 \
              --load-balancing-scheme=EXTERNAL_MANAGED
          fi
